<h2>Overview</h2>
By the end of this article you should be able to answer the following questions:

[accordion]
[toggle title="What is the command list all the units that the multi-user.target starts up?"]
$ systemctl list-dependencies multi-user.target
[/toggle]
[toggle title="Which directory do you change the contents of to override the contents of /usr/lib/systemd/system?"]
/etc/systemd/system/
[/toggle]
[toggle title="What is the command to list all the units that are started up when the 'graphical.target' is activated?"]
$ ls -l /usr/lib/systemd/system/graphical.target.wants
[/toggle]
[toggle title="What is the command to list the default target in symbolic link form?"]
$ ls -l /etc/systemd/system/default.target
[/toggle]
[toggle title="What is the main command to display the default target?"]
$ systemctl get-default
[/toggle]
[toggle title="What are the 3 ways to switch to a different target?"]
- The systemctl command's set-default subcommand. This is persistant
- Use systemctl's "isolate" subcommand (this is non-persistant)
- From the grub menu during machine bootup (this is non-persistant)
[/toggle]
[toggle title="What is the command to set the 'multi-user.target' as the default target?"]
$ systemctl set-default multi-user.target
[/toggle]
[toggle title="What is the systemctl command to switch to 'rescue.target' target non-persistantly?"]
$ systemctl isolate rescue.target
[/toggle]
[toggle title="How do you switch to the 'multi-user.target' via the grub menu?"]
1. Wait for the grub menu, then hit "e",
2. scroll down to the "linux16" line then press the 'end' key
3. type the following:
systemd.unit=multi-user.target
4. press ctrl+x
[/toggle]
[/accordion]
<hr/>



There will be times when you want to boot your machine and only want the command line running. Whereas there will be other times you'll want to boot your machine with the whole GNOME gui running. This is possible

In RHEL 7, we have a concept known as "target". A target is something that lets you define your preferences on what units (i.e. services, mounts, sockets,..etc) should be started/activated when you boot your machine.

In RHEL, targets are a type of unit, and therefore each target is represented by it's own .target file which resides in the <code>/usr/lib/systemd/system</code> directory.

Here's a list of all the targets:


<pre>
$ ls -l /usr/lib/systemd/system | grep "target$"
-rw-r--r--. 1 root root  312 Jul  2  2014 anaconda.target
-rw-r--r--. 1 root root  546 Jun 10  2014 basic.target
-rw-r--r--. 1 root root  379 Jun 10  2014 bluetooth.target
-rw-r--r--. 1 root root  366 Jun 10  2014 cryptsetup.target
lrwxrwxrwx. 1 root root   13 Mar 14 19:16 ctrl-alt-del.target -> reboot.target
lrwxrwxrwx. 1 root root   16 Mar 14 19:16 default.target -> graphical.target
-rw-r--r--. 1 root root  431 Jun 10  2014 emergency.target
-rw-r--r--. 1 root root  440 Jun 10  2014 final.target
-rw-r--r--. 1 root root  460 Jun 10  2014 getty.target
-rw-r--r--. 1 root root  522 Jun 10  2014 <mark>graphical.target</mark>
-rw-r--r--. 1 root root  487 Jun 10  2014 halt.target
-rw-r--r--. 1 root root  447 Jun 10  2014 hibernate.target
-rw-r--r--. 1 root root  468 Jun 10  2014 hybrid-sleep.target
-rw-r--r--. 1 root root  536 Jun 10  2014 initrd-fs.target
-rw-r--r--. 1 root root  509 Jun 10  2014 initrd-root-fs.target
-rw-r--r--. 1 root root  691 Jun 10  2014 initrd-switch-root.target
-rw-r--r--. 1 root root  654 Jun 10  2014 initrd.target
-rw-r--r--. 1 root root  501 Jun 10  2014 kexec.target
-rw-r--r--. 1 root root  395 Jun 10  2014 local-fs-pre.target
-rw-r--r--. 1 root root  489 Jun 10  2014 local-fs.target
-rw-r--r--. 1 root root  524 Jun 10  2014 <mark>multi-user.target</mark>
-rw-r--r--. 1 root root  443 Jun 10  2014 network-online.target
-rw-r--r--. 1 root root  433 Jun 10  2014 network.target
-rw-r--r--. 1 root root  193 Jun 10  2014 nfs.target
-rw-r--r--. 1 root root  514 Jun 10  2014 nss-lookup.target
-rw-r--r--. 1 root root  473 Jun 10  2014 nss-user-lookup.target
-rw-r--r--. 1 root root  354 Jun 10  2014 paths.target
-rw-r--r--. 1 root root  500 Jun 10  2014 poweroff.target
-rw-r--r--. 1 root root  377 Jun 10  2014 printer.target
-rw-r--r--. 1 root root  493 Jun 10  2014 reboot.target
-rw-r--r--. 1 root root  396 Jun 10  2014 remote-fs-pre.target
-rw-r--r--. 1 root root  482 Jun 10  2014 remote-fs.target
-rw-r--r--. 1 root root  486 Jun 10  2014 rescue.target
-rw-r--r--. 1 root root  500 Jun 10  2014 rpcbind.target
lrwxrwxrwx. 1 root root   15 Mar 14 19:16 runlevel0.target -> poweroff.target
lrwxrwxrwx. 1 root root   13 Mar 14 19:16 runlevel1.target -> rescue.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel2.target -> multi-user.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel3.target -> multi-user.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel4.target -> multi-user.target
lrwxrwxrwx. 1 root root   16 Mar 14 19:16 runlevel5.target -> graphical.target
lrwxrwxrwx. 1 root root   13 Mar 14 19:16 runlevel6.target -> reboot.target
-rw-r--r--. 1 root root  402 Jun 10  2014 shutdown.target
-rw-r--r--. 1 root root  362 Jun 10  2014 sigpwr.target
-rw-r--r--. 1 root root  420 Jun 10  2014 sleep.target
-rw-r--r--. 1 root root  409 Jun 10  2014 slices.target
-rw-r--r--. 1 root root  380 Jun 10  2014 smartcard.target
-rw-r--r--. 1 root root  356 Jun 10  2014 sockets.target
-rw-r--r--. 1 root root  380 Jun 10  2014 sound.target
-rw-r--r--. 1 root root   49 Jun  9  2014 spice-vdagentd.target
-rw-r--r--. 1 root root  441 Jun 10  2014 suspend.target
-rw-r--r--. 1 root root  353 Jun 10  2014 swap.target
-rw-r--r--. 1 root root  540 Jun 10  2014 sysinit.target
-rw-r--r--. 1 root root  652 Jun 10  2014 system-update.target
-rw-r--r--. 1 root root  355 Jun 10  2014 timers.target
-rw-r--r--. 1 root root  509 Jun 10  2014 time-sync.target
-rw-r--r--. 1 root root  417 Jun 10  2014 umount.target
</pre>

Note: the highlighted targets are the most common ones.

In total there are about 60 targets:

<pre>
$ systemctl list-unit-files --type=target | wc -l
59
</pre>


To see which targets are currently active, we do:



<pre>
$ systemctl list-units --type target
UNIT                 LOAD   ACTIVE SUB    DESCRIPTION
basic.target         loaded active active Basic System
cryptsetup.target    loaded active active Encrypted Volumes
getty.target         loaded active active Login Prompts
graphical.target     loaded active active Graphical Interface
local-fs-pre.target  loaded active active Local File Systems (Pre)
local-fs.target      loaded active active Local File Systems
multi-user.target    loaded active active Multi-User System
network.target       loaded active active Network
paths.target         loaded active active Paths
remote-fs-pre.target loaded active active Remote File Systems (Pre)
remote-fs.target     loaded active active Remote File Systems
slices.target        loaded active active Slices
sockets.target       loaded active active Sockets
swap.target          loaded active active Swap
sysinit.target       loaded active active System Initialization
timers.target        loaded active active Timers

LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.

16 loaded units listed. Pass --all to see loaded but inactive units, too.
To show all installed unit files use 'systemctl list-unit-files'.

</pre>

All the units that are currently active on the machine represented to the collective sum of all the units in the above list of targets.



Now to make a target responsible for starting a unit at boot time, we need to <em>enable</em> that unit using the systemctl command.

<pre>
$ systemctl enable httpd
ln -s '/usr/lib/systemd/system/httpd.service' '/etc/systemd/system/multi-user.target.wants/httpd.service'
</pre>

This essentially creates a soft link in the "multi-user.target.wants" folder.

The systemctl command knew that it needed to create the link in the multi-user.target.wants folder because that is what's defined in the httpd.service unit file's [Install] sections.

This is systemctl's way of telling the multi-user.target that in future it now needs to start up the httpd.servie as part of it's start up process.


Due to this nature of having the startup of one unit dependent on another means that end with a bit of a dependency like tree structure. You can view this dependency using systemctl's list-dependencies command:

<pre>
$ systemctl list-dependencies multi-user.target
multi-user.target
├─abrt-ccpp.service
├─abrt-oops.service
├─abrt-vmcore.service
├─ModemManager.service
├─network.service
├─NetworkManager.service
├─plymouth-quit-wait.service
├─vmtoolsd.service
├─xinetd.service
├─basic.target
│ ├─alsa-restore.service
│ ├─alsa-state.service
│ ├─microcode.service
│ ├─rhel-autorelabel-mark.service
│ ├─rhel-autorelabel.service
│ ├─rhel-configure.service
│ ├─rhel-dmesg.service
│ ├─rhel-loadmodules.service
│ ├─paths.target
│ ├─slices.target
│ │ ├─-.slice
│ │ └─system.slice
│ ├─sockets.target
│ │ ├─avahi-daemon.socket
.
...etc
</pre>


<h2>Adjusting a unit's settings</h2>
The <code>/usr/lib/systemd/system</code> directory is supposed to hold default settings only. This means that you're not supposed to make any changes in this directory. Unit files are usually dropped into this folder when you install rpm packages, e.g. the httpd package. If you want to override anything or create your own <em>units</em>, then you should do that in the the <code>/etc/systemd/system/</code> directory instead:


<pre>
$ ls -l /etc/systemd/system/
total 16
drwxr-xr-x. 2 root root   54 Mar 14 19:20 basic.target.wants
drwxr-xr-x. 2 root root   30 Mar 14 19:18 bluetooth.target.wants
lrwxrwxrwx. 1 root root   41 Mar 14 19:18 dbus-org.bluez.service -> /usr/lib/systemd/system/bluetooth.service
lrwxrwxrwx. 1 root root   41 Mar 14 19:17 dbus-org.fedoraproject.FirewallD1.service -> /usr/lib/systemd/system/firewalld.service
lrwxrwxrwx. 1 root root   44 Mar 14 19:17 dbus-org.freedesktop.Avahi.service -> /usr/lib/systemd/system/avahi-daemon.service
lrwxrwxrwx. 1 root root   44 Mar 14 19:20 dbus-org.freedesktop.ModemManager1.service -> /usr/lib/systemd/system/ModemManager.service
lrwxrwxrwx. 1 root root   46 Mar 14 19:17 dbus-org.freedesktop.NetworkManager.service -> /usr/lib/systemd/system/NetworkManager.service
lrwxrwxrwx. 1 root root   57 Mar 14 19:17 dbus-org.freedesktop.nm-dispatcher.service -> /usr/lib/systemd/system/NetworkManager-dispatcher.service
lrwxrwxrwx. 1 root root   36 Mar 14 19:23 default.target -> /lib/systemd/system/graphical.target
drwxr-xr-x. 2 root root   85 Mar 14 19:16 default.target.wants
lrwxrwxrwx. 1 root root   35 Mar 14 19:19 display-manager.service -> /usr/lib/systemd/system/gdm.service
drwxr-xr-x. 2 root root   31 Mar 14 19:16 getty.target.wants
drwxr-xr-x. 2 root root 4096 Mar 14 19:26 graphical.target.wants
drwxr-xr-x. 2 root root 4096 Jun  6 12:44 multi-user.target.wants
drwxr-xr-x. 2 root root   29 Mar 14 19:17 nfs.target.wants
drwxr-xr-x. 2 root root   25 Mar 14 19:17 printer.target.wants
drwxr-xr-x. 2 root root 4096 Mar 14 19:17 sockets.target.wants
drwxr-xr-x. 2 root root   35 Mar 14 19:20 spice-vdagentd.target.wants
drwxr-xr-x. 2 root root 4096 Mar 14 19:17 sysinit.target.wants
drwxr-xr-x. 2 root root   83 Mar 14 19:16 system-update.target.wants
</pre>


====================================================
need to clean up the rest of this article.


From the systemctl, command's status info you'll also see that the service is represented in the form of a file:



<pre>
$ systemctl status httpd.service
httpd.service - The Apache HTTP Server
   Loaded: loaded (<mark>/usr/lib/systemd/system/httpd.service</mark>; enabled)
   Active: active (running) since Sat 2015-06-06 11:08:52 BST; 5min ago
 Main PID: 4336 (httpd)
   Status: "Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec"
   CGroup: /system.slice/httpd.service
           ├─4336 /usr/sbin/httpd -DFOREGROUND
           ├─4337 /usr/sbin/httpd -DFOREGROUND
           ├─4338 /usr/sbin/httpd -DFOREGROUND
           ├─4339 /usr/sbin/httpd -DFOREGROUND
           ├─4340 /usr/sbin/httpd -DFOREGROUND
           └─4341 /usr/sbin/httpd -DFOREGROUND

Jun 06 11:08:52 centos7.codingbee.dyndns.org systemd[1]: Starting The Apache HTTP Server...
Jun 06 11:08:52 centos7.codingbee.dyndns.org systemd[1]: Started The Apache HTTP Server.
</pre>





This folder houses a *.service file for each available service. An rpm that comes with a service, (e.g. the apache web server, httpd)  will drop a *.service into this folder when you install the rpm. Therefore to find out whether an rpm package has installed a service, and if so, what services it has installed, you can do:


<pre>
$ rpm -ql httpd | grep ".service$"
/usr/lib/systemd/system/htcacheclean.service
/usr/lib/systemd/system/httpd.service
</pre>










<h2>Target dependencies</h2>

Let's take a look at all the services are assigned to the graphical target:

<pre>
$ ls -l /usr/lib/systemd/system/graphical.target.wants
total 0
[root@centos7 system]# ls -l /etc/systemd/system/graphical.target.wants/*.service
lrwxrwxrwx. 1 root root 47 Mar 14 19:16 /etc/systemd/system/graphical.target.wants/accounts-daemon.service -> /usr/lib/systemd/system/accounts-daemon.service
lrwxrwxrwx. 1 root root 51 Mar 14 19:23 /etc/systemd/system/graphical.target.wants/firstboot-graphical.service -> /usr/lib/systemd/system/firstboot-graphical.service
lrwxrwxrwx. 1 root root 44 Mar 14 19:17 /etc/systemd/system/graphical.target.wants/rtkit-daemon.service -> /usr/lib/systemd/system/rtkit-daemon.service
</pre>

As you can see, there is no services in the default folder, and only three under the etc folder.

This appears far lower than expected. However that is because targets have a hierarchial like dependencies on one another. To understand what I mean you need to take a look at a target's unit file:


<pre>
$ cat /usr/lib/systemd/system/graphical.target
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.

[Unit]
Description=Graphical Interface
Documentation=man:systemd.special(7)
<strong>Requires=multi-user.target</strong>
After=multi-user.target
Conflicts=rescue.target
Wants=display-manager.service
AllowIsolate=yes

[Install]
Alias=default.target

</pre>

Note, AllowIsolate means you can switch to this target from another target.  This setting is usually set to "yes".

Here it shows that the "graphical" target can only be loaded after the multi-user target has been loaded, as indicated by the "Require" setting. This means that if you load the graphical target, then systemd will read this definition and then first load the multi-user targets. Note, the multi-user target may itself has it's own dependencies, and so on.

By the way, service definition, e.g. the httpd.service shown above, can specify dependencies on targets as well, if so then they are defined in the "unit" section, e.g.:


<pre>
cat /usr/lib/systemd/system/httpd.service
[Unit]
Description=The Apache HTTP Server
<strong>After=network.target remote-fs.target nss-lookup.target</strong>

[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/httpd
ExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND
ExecReload=/usr/sbin/httpd $OPTIONS -k graceful
ExecStop=/bin/kill -WINCH ${MAINPID}
# We want systemd to give httpd some time to finish gracefully, but still want
# it to kill httpd after TimeoutStopSec if something went wrong during the
# graceful stop. Normally, Systemd sends SIGTERM signal right after the
# ExecStop, which would kill httpd. We are sending useless SIGCONT here to give
# httpd time to finish.
KillSignal=SIGCONT
PrivateTmp=true

[Install]
WantedBy=multi-user.target


</pre>


This offers a further granularity of control on when a service should be started and loading dependencies before hand.



<h2>Default target</h2>

Due to the hierarchial dependency structure of targets, it means that there is a top level target. You can choose the default top level target by editing the "default.target" symbolic link, which is located at:


<pre>
$ ls -l /etc/systemd/system/default.target
lrwxrwxrwx. 1 root root 36 Mar 14 19:23 /etc/systemd/system/default.target -> /lib/systemd/system/graphical.target
</pre>


As you can see, at the moment the the default target is set to "graphical", which will start up the gnome desktop gui interface when you boot the machine.

You can also get this info using systemctl:


<pre>
$ systemctl get-default
graphical.target
</pre>

Similarly you can change the default target like this:

<pre>
$ systemctl set-default multi-user.target
rm '/etc/systemd/system/default.target'
ln -s '/usr/lib/systemd/system/multi-user.target' '/etc/systemd/system/default.target'
$ systemctl get-default
multi-user.target
</pre>





<h2>Commonly used targets</h2>

The most commonly used targets are those that are equivalent to the old style runlevels:


<pre>
$ ls -l /usr/lib/systemd/system  | grep runlevel | grep "^l"
lrwxrwxrwx. 1 root root   15 Mar 14 19:16 runlevel0.target -> poweroff.target
lrwxrwxrwx. 1 root root   13 Mar 14 19:16 runlevel1.target -> rescue.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel2.target -> multi-user.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel3.target -> multi-user.target
lrwxrwxrwx. 1 root root   17 Mar 14 19:16 runlevel4.target -> multi-user.target
lrwxrwxrwx. 1 root root   16 Mar 14 19:16 runlevel5.target -> graphical.target
lrwxrwxrwx. 1 root root   13 Mar 14 19:16 runlevel6.target -> reboot.target
</pre>



poweroff.target - if your machine enters this state, then it will turn off your machine.
rescue.target - this enters troubleshooting mode. A bit like single user mode I think.
multi-user.target - Fully operational mode, this is the normal mode but without Gnome desktop UI.
graphical.target - Same as multi-user.target but with the Gnome desktop UI enabled.
reboot.target - entering this state ends up rebooting the machine

There is also another one of interest, which is:

emergency.target - this is more minimal version of the rescue.target.





One thing to bear in mind is that since systemd does a lot more than just managing services, this means that targets do a lot more than just ensuring the state of services, it also ensures the state of all unit types, i.e. *.mount, *.socket....etc.





<h2>Switching betweeen systemd targets</h2>

There's a few ways to switch between (top level) targets. First ways to do this:



<ul>
	<li>Change the default target, and then reboot the machine.</li>
	<li>Use systemctl's "isolate" subcommand (this is non-persistant)</li>
	<li>From the grub menu, hit e, then specify the target (this is non-persistant)</li>
</ul>

<h3>Switching targets using the "isolate" subcommand</h3>

We can switch using the isolate subcommand:


<pre>
$ systemctl --help | grep isolate
  isolate [NAME]                  Start one unit and stop all others
</pre>


Therefore to switch to the rescue mode, we do:

<pre>
$ systemctl isolate rescue.target
</pre>

This results in:


<a href="http://codingbee.net/wp-content/uploads/2015/06/reNpfwk1.png"><img src="http://codingbee.net/wp-content/uploads/2015/06/reNpfwk1.png" alt="" width="740" height="418" class="alignnone size-full wp-image-4584" /></a>


You can then check that you are in rescue.target state like this:

<a href="http://codingbee.net/wp-content/uploads/2015/06/Ez5hdu6.png"><img src="http://codingbee.net/wp-content/uploads/2015/06/Ez5hdu6.png" alt="" width="738" height="418" class="alignnone size-full wp-image-4585" /></a>


Notice that we only have a small number of targets active, since we are in rescue mode. Also even sshd service is disabled.


We can return back to mult-user.target using the isolate subcommand again:


<pre>
$ systemctl isolate multi-user.target
</pre>

By the way, emergency.target looks like this:


<a href="http://codingbee.net/wp-content/uploads/2015/06/pIqSAEC.png"><img src="http://codingbee.net/wp-content/uploads/2015/06/pIqSAEC.png" alt="" width="744" height="426" class="alignnone size-full wp-image-4587" /></a>


Note: due to emergency mode being barebones. You can't use isolate to switch to another target while being in emergency.target state.





<h3>Switching targets via the grub menu</h3>

This is something that you will commonly do if for some reason you have trouble booting up into graphical or mult-user targets. In which you can use grub to boot into a trouble shooting mode, such as rescue.target or emergency.target.


While your machine is booting, as soon as you see the grub menu, select the (e)dit option:


<a href="http://codingbee.net/wp-content/uploads/2015/06/vdsRWtz.png"><img src="http://codingbee.net/wp-content/uploads/2015/06/vdsRWtz.png" alt="" width="739" height="415" class="alignnone size-full wp-image-4589" /></a>



Then navigate to the line that starts with "linux16", press the 'end' key, and then append the following setting:

<pre>
systemd.unit=rescue.target
</pre>

So that we have:

<a href="http://codingbee.net/wp-content/uploads/2015/06/WIyCkNw.png"><img src="http://codingbee.net/wp-content/uploads/2015/06/WIyCkNw.png" alt="" width="735" height="419" class="alignnone size-full wp-image-4590" /></a>


Then control+x to resume the boot process with the modified settings.

In this example we have gone into the rescue.target, this means that after that has been done, you can use systemctl's isolate command to return to one of the fully operational normal targets, mult-user or graphical.
