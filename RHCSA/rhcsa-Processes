<h2>Overview</h2>
By the end of this article you should be able to answer the following questions:

[accordion]
[toggle title="What is the command to list all processes running on the machine?"]
$ ps -ef
# this list's (e)very process in (f)ull format
[/toggle]
[toggle title="What command can visually show process dependencies, along with pid values and command line options?"]
$ pstree -ap
[/toggle]
[toggle title="What is the command to display all the pids for processes called 'httpd' that are running under the user 'apache'?"]
$ pgrep -lu apache httpd
[/toggle]
[/accordion]

<hr/>


In linux there are lots of processes running, to get a full list, we use the ps command:


The following command gives a complete list of all the processes that are currently running:

<pre>
$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.4  59744  4848 ?        Ss   May01   0:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 24
root         2  0.0  0.0      0     0 ?        S    May01   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    May01   0:00 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S<   May01   0:00 [kworker/0:0H]
.
.
...etc
</pre>


This lists (a)ll processes for every (u)ser and it lifts the “must have tty” restri(x)ion so to also allowing to display processes owned by system accounts (e.g. processes owned by the sshd service).


If you see the man page for ps, you'll find that the "aux" is bsd syntax, which isn't recommended. Instead we should be using the "standard syntax" alternative for specifying flags:


<pre>
$ ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 May01 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 24
root         2     0  0 May01 ?        00:00:00 [kthreadd]
.
.
.
</pre>


This lists the same processes, but gives different column info when compared to the aux, you can fix this by manually specifying what column you want:

<pre>
$ ps -eo user,pid,pcpu,pmem,vsize,rss,tname,stat,start_time,bsdtime,command | head
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.4  59744  4848 ?        Ss   May01   0:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 24
root         2  0.0  0.0      0     0 ?        S    May01   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    May01   0:00 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S<   May01   0:00 [kworker/0:0H]
root         6  0.0  0.0      0     0 ?        S    May01   0:00 [kworker/u2:0]
root         7  0.0  0.0      0     0 ?        S    May01   0:00 [migration/0]
root         8  0.0  0.0      0     0 ?        S    May01   0:00 [rcu_bh]
root         9  0.0  0.0      0     0 ?        S    May01   0:00 [rcuob/0]
root        10  0.0  0.0      0     0 ?        R    May01   0:04 [rcu_sched]
</pre>

You can find info about all the columns in the ps command's man page. Here's some one liner descriptions for some of the more less obvious columns:

<strong>VSZ</strong> - This is the amount of ram space that this process has reserved.
<strong>RSS</strong> - This is the amount of ram that this process is actually using.
<strong>TTY</strong> - A "?" indicates that this is process is not a shell job, i.e. it is a background process that has been triggered by a service, or parent processes
<strong>STAT</strong> - this means status, where "S" means it is asleep, and "R" means it is running.


<h2>Parent and Child process</h2>
Processes can trigger other child processes. You can find the parent process id for a given process by displaying the parent process id "ppid" column:

<pre>
[root@localhost /]# ps -eo user,pid,ppid,pcpu,pmem,vsize,rss,tname,stat,start_time,bsdtime,command | head
USER       PID  PPID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1     0  0.0  0.4  59744  4848 ?        Ss   May01   0:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 24
root         2     0  0.0  0.0      0     0 ?        S    May01   0:00 [kthreadd]
root         3     2  0.0  0.0      0     0 ?        S    May01   0:00 [ksoftirqd/0]
root         5     2  0.0  0.0      0     0 ?        S<   May01   0:00 [kworker/0:0H]
root         6     2  0.0  0.0      0     0 ?        S    May01   0:00 [kworker/u2:0]
root         7     2  0.0  0.0      0     0 ?        S    May01   0:00 [migration/0]
root         8     2  0.0  0.0      0     0 ?        S    May01   0:00 [rcu_bh]
root         9     2  0.0  0.0      0     0 ?        S    May01   0:00 [rcuob/0]
root        10     2  0.0  0.0      0     0 ?        R    May01   0:04 [rcu_sched]
</pre>


However this isn't that easy to following. A better command to use is the pstree, which shows the relationships more visually:



<pre>
$ pstree -ap
systemd,1 --switched-root --system --deserialize 24
  ├─ModemManager,626
  │   ├─{ModemManager},635
  │   └─{ModemManager},691
  ├─NetworkManager,2112 --no-daemon
  │   ├─dhclient,11814 -d -q -sf /usr/libexec/nm-dhcp-helper -pf /var/run/dhclient-enp0s3.pid -
  ├─at-spi-bus-laun,3794
  │   ├─dbus-daemon,3798 --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3
  │   │   └─{dbus-daemon},3800
  │   ├─{at-spi-bus-laun},3795
  │   ├─{at-spi-bus-laun},3797
  │   └─{at-spi-bus-laun},3799
  ├─at-spi2-registr,3803 --use-gnome-session
  │   └─{at-spi2-registr},3806
  ├─atd,1332 -f
  ├─gdm,1334
  │   ├─gdm-simple-slav,1355 --display-id /org/gnome/DisplayManager/Displays/_0
  │   │   ├─Xorg,1367 :0 -background none -verbose -auth /run/gdm/auth-for-gdm-AS4ueL/database -seat seat0 -nolisten tcp vt1
  │   │   ├─gdm-session-wor,3593
  │   │   │   ├─gnome-session,3626 --session gnome-classic
  │   │   │   │   ├─abrt-applet,4015
  │   │   │   │   │   └─{abrt-applet},4035
  │   │   │   │   ├─gnome-settings-,3816
  │   │   │   │   │   ├─{gnome-settings-},3824
  │   │   │   │   │   ├─{gnome-settings-},3829
.
.
...etc
</pre>

Here is the help info for pstree:

<pre>
$ pstree --help
pstree: unrecognized option '--help'
Usage: pstree [ -a ] [ -c ] [ -h | -H PID ] [ -l ] [ -n ] [ -p ] [ -g ] [ -u ]
              [ -A | -G | -U ] [ PID | USER ]
       pstree -V
Display a tree of processes.

  -a, --arguments     show command line arguments
  -A, --ascii         use ASCII line drawing characters
  -c, --compact       don't compact identical subtrees
  -h, --highlight-all highlight current process and its ancestors
  -H PID,
  --highlight-pid=PID highlight this process and its ancestors
  -g, --show-pgids    show process group ids; implies -c
  -G, --vt100         use VT100 line drawing characters
  -l, --long          don't truncate long lines
  -n, --numeric-sort  sort output by PID
  -N type,
  --ns-sort=type      sort by namespace type (ipc, mnt, net, pid, user, uts)
  -p, --show-pids     show PIDs; implies -c
  -s, --show-parents  show parents of the selected process
  -S, --ns-changes    show namespace transitions
  -u, --uid-changes   show uid transitions
  -U, --unicode       use UTF-8 (Unicode) line drawing characters
  -V, --version       display version information
  -Z,
  --security-context   show SELinux security contexts
  PID    start at this PID; default is 1 (init)
  USER   show only trees rooted at processes of this user
</pre>


Note if a child process is note responding for any reason, then a quick way to fix this is by killing the parent process.



One of the things you will often find yourself doing is locating a particular process. This can be done by piping the output of "ps -ef" to a grep command. However you can also use the pgrep command. For example to list all processes called something like "http" and are running under the user "apache", we do:

<pre>
$ pgrep -lu apache http
20428 httpd
20429 httpd
20430 httpd
20431 httpd
20432 httpd

</pre>
